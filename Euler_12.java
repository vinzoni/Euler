package euler;

import java.util.function.IntUnaryOperator;
import java.util.stream.IntStream;

/**
 * @author eanvinz
 * The sequence of triangle numbers is generated by adding the natural numbers. 
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
 * The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 
 *   1: 1
 *   3: 1,3
 *   6: 1,2,3,6
 *   10: 1,2,5,10
 *   15: 1,3,5,15
 *   21: 1,3,7,21
 *   28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Euler_12 extends EulerBase {
    
    private static final int REQUESTED_NUMBER_OF_DIVISORS = 500; // = 76576500 ; first run: 01::43::39

    Euler_12() { super("Highly divisible triangular number", "76576500"); }
    
    private IntUnaryOperator triangular = n -> (n == 1) ? 1 : n + this.triangular.applyAsInt(n - 1);
        
    public void run() {

        // if a divides X then X = a * b when a <= Sqrt(X) and b >= Sqrt(X). 
        // so I look for 'a's and multiply by two to get the number of divisors.
        // This assumes an even number of divisors, possibly false if X = a^2 ... maybe 
        IntUnaryOperator divisors = n ->    2 * (int) IntStream.iterate(1, x -> x + 1)
                                            .limit((int)Math.sqrt(n))
                                            .filter(x -> n % x == 0)
                                            .count();

        // for a number X with REQUESTED_NUMBER_OF_DIVISORS divisors is surely X > REQUESTED_NUMBER_OF_DIVISORS 
        int bigTriangular = IntStream.iterate(REQUESTED_NUMBER_OF_DIVISORS, x -> x + 1)                
                .map(triangular)
                .filter(x -> IntStream.of(x)
                                        .map(divisors)
                                        .anyMatch(y -> y >= REQUESTED_NUMBER_OF_DIVISORS))
                .findFirst().getAsInt();
        
        printout(bigTriangular);        
    }
}
