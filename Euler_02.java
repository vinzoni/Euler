/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package euler;

import java.util.stream.Stream;

/**
 * @author eanvinz
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be: 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
 * find the sum of the even-valued terms.
 */
class Euler_02 extends EulerBase {
    
    Euler_02() { super("Even Fibonacci numbers", "4613732"); }
    
    private int fibonacci(int x) {
        if (x == 1) return 1;
        else if (x == 2) return 2;
        else return (fibonacci(x-1) + fibonacci(x-2));
    };
        
    private int limitCount = 0;

    public void run() {
        
        Stream.iterate(1, x -> x + 1)
                .mapToInt(x -> x)
                .map(this::fibonacci)
                .peek(x -> limitCount++) // awful hack waiting for takeWhile
                .allMatch(x -> x <= 4_000_000);
        
        limitCount--;
        // ora limitCount contiene il numero di numeri di fibonacci inferiori a 4M
        
        int sum = Stream.iterate(1, x -> x + 1)
                .limit(limitCount)
                .mapToInt(x -> x)
                .map(this::fibonacci)
                .filter(x -> x <= 4_000_000)
                .filter(x -> x % 2 == 0)
                .sum();
        
        printout(sum);        
    }
}